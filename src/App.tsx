import { useEffect } from "react";
import { getIntersections } from './intersections'
import paper, { CompoundPath } from 'paper'
import { rust_get_intersections } from '../intersections/pkg'
const pathToVectorNetwork = (paths: any) => {
  const res = []
  for (let i = 0; i < paths.length; i++) {
    const path = paths[i];
    const curves = path.getCurves()
    for (let j = 0; j < curves.length; j++) {
      const curve = curves[j].getValues();
      res.push(curve)
    }
  }
  return res
}
const svgPath = "M 8.236062033535067 3.5386279173377617 C 7.759700940847784 2.2041843284562987 6.806990339953376 1.1557162469999995 5.568451544395778 0.5838118193001733 C 4.139368266333932 -0.08340997514055826 2.519717563954199 -0.17871575190743655 0.9000898033881065 0.2978712522378858 C 0.3284564694487013 0.48850605673669467 -0.1478697420281124 1.1557045433987756 0.042674697886133726 1.822926337839507 C 0.23321913780037987 2.490148132280239 0.9001014446549296 2.8714410206497085 1.5670069630597907 2.6808062161508994 C 1.6622791830169137 2.6808062161508994 1.8528468770714719 2.5854539090471174 1.9481190970285949 2.5854539090471174 C 2.043391316985718 2.5854539090471174 2.043344794508427 2.5854539090471174 2.13861701446555 2.5854539090471174 C 2.4244336814352527 2.490136506797713 1.9481074557617724 2.5854539090471174 2.233924122731475 2.5854539090471174 C 2.5197407897011774 2.5854539090471174 2.805522532870411 2.5854539090471174 3.091339199840114 2.5854539090471174 C 3.28188363975436 2.5854539090471174 3.3771558526131495 2.5854539090471174 3.5677002925273955 2.5854539090471174 C 3.4724280725702723 2.5854539090471174 3.4724280725702723 2.5854539090471174 3.5677002925273955 2.5854539090471174 C 3.6629725124845187 2.5854539090471174 3.6629841395546747 2.5854539090471174 3.758256359511798 2.5854539090471174 C 3.853528579468921 2.5854539090471174 4.04409604637681 2.6808062161508994 4.139368266333933 2.6808062161508994 C 4.234640486291056 2.6808062161508994 4.234652113361212 2.6807829438807476 4.329924333318335 2.776100346130152 C 4.520468773232581 2.8714177483795567 4.234652113361212 2.6807829438807476 4.329924333318335 2.776100346130152 C 4.520468773232581 2.8714177483795567 4.710989944809848 2.966758415797413 4.901534384724094 3.1573932202962216 C 4.996806604681217 3.1573932202962216 4.996818231751373 3.2526873502754743 5.092090451708496 3.2526873502754743 C 5.187362671665619 3.348004752524879 4.90154601179425 3.1573699480260697 5.092090451708496 3.2526873502754743 C 5.187362671665619 3.348004752524879 5.282623257454253 3.443310515088357 5.377895477411376 3.5386279173377617 C 5.473167697368499 3.6339453195871663 5.568451544395778 3.729309486529567 5.568451544395778 3.8246268887789716 C 5.663723764352901 4.015261693277781 5.568451544395778 3.8246268887789716 5.568451544395778 3.8246268887789716 C 5.568451544395778 3.8246268887789716 5.6637005031142555 3.9198977464880724 5.6637005031142555 4.015215148737477 C 5.758972723071379 4.110532550986881 5.758984350141534 4.205873218404737 5.8542565700986575 4.3965080229035465 C 5.8542565700986575 4.3965080229035465 5.949528790055781 4.587119555132204 5.8542565700986575 4.4918021528828 C 5.758984350141534 4.3011673483839905 5.8542565700986575 4.587154459986581 5.8542565700986575 4.587154459986581 C 6.044801010012904 5.159058887686408 6.71168328847412 5.635610965672253 7.378588806878981 5.444976161173444 C 8.045494325283842 4.873071733473617 8.521878700504768 4.205849711778493 8.236062033535067 3.5386279173377617 Z"

export default function App() {
  useEffect(() => {
    main()
  }, [])

  const main = async () => {
    paper.setup('canvas-id');

    const words1 = new CompoundPath(svgPath)
    const inrsections1 = pathToVectorNetwork(words1.children)
    console.time('wasm')
    const wasm_res = rust_get_intersections(new Float64Array(inrsections1.flat()));
    const wasm_chunk = chunkArray(wasm_res, 8)
    console.timeEnd('wasm')
    const set1 = new Set()
    for (let i = 0; i < wasm_chunk.length; i++) {
      const item = wasm_chunk[i];
      set1.add(`${item[0].toFixed(8)}#${item[2].toFixed(8)}#${item[3].toFixed(8)}`)
    }
    console.log(wasm_chunk);

    const myIntersections: any = []
    getIntersections(inrsections1, undefined, myIntersections)
    console.log(myIntersections);

    const paperIntersections = []
    console.time('paperjs')
    const intersections = (words1 as any).getIntersections().filter((item: any) => !item._overlap && item.isCrossing())
    console.timeEnd('paperjs')
    for (let j = 0; j < intersections.length; j++) {
      const item = intersections[j];
      const temp = []
      temp.push(item.time)
      temp.push(item.point.x)
      temp.push(item.point.y)
      temp.push(item.intersection.time)
      temp.push(item.intersection.point.x)
      temp.push(item.intersection.point.y)
      paperIntersections.push([...temp])
    }
    const set2 = new Set()
    for (let i = 0; i < paperIntersections.length; i++) {
      const item = paperIntersections[i];
      set2.add(`${item[0].toFixed(8)}#${item[1].toFixed(8)}#${item[2].toFixed(8)}`)
    }
    console.log(paperIntersections);

    for (const v of set2) {
      if (!set1.has(v)) {
        console.log(v);
        break;
      }
    }
  }

  return (
    <div>
      <canvas id="canvas-id"></canvas>
      <svg width="300" height="300" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg" id="path1">
        <path d={svgPath} stroke="#D9D9D9" />
      </svg>
    </div>
  );
}


function chunkArray(array: Float64Array, chunkSize: number) {
  let result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    let chunk = array.slice(i, i + chunkSize);
    result.push(chunk);
  }

  return result;
}